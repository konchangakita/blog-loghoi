name: Backend CI

on:
  pull_request:
    branches:
      - refactor
      - main
    paths:
      - "ongoing/backend/**"
      - ".github/workflows/backend-ci.yml"
  push:
    branches:
      - refactor
      - main
    paths:
      - "ongoing/backend/**"

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ongoing/backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pylint black flake8 mypy

      - name: Run Black format check
        run: |
          # Get changed Python files in this PR
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep '\.py$' || true)
          if [ -n "$CHANGED_FILES" ]; then
            echo "Checking changed files: $CHANGED_FILES"
            black --check --diff $CHANGED_FILES
          else
            echo "No Python files changed"
          fi

      - name: Run Flake8
        run: |
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep '\.py$' || true)
          if [ -n "$CHANGED_FILES" ]; then
            echo "Checking changed files with flake8: $CHANGED_FILES"
            flake8 $CHANGED_FILES --count --select=E9,F63,F7,F82 --show-source --statistics
          else
            echo "No Python files changed"
          fi

      - name: Run Pylint
        run: |
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep '\.py$' | grep -E '^ongoing/backend/(fastapi_app|core)/' || true)
          if [ -n "$CHANGED_FILES" ]; then
            echo "Checking changed files with pylint: $CHANGED_FILES"
            pylint --disable=all --enable=E,F $CHANGED_FILES --exit-zero
          else
            echo "No relevant Python files changed"
          fi

      - name: Run MyPy type check
        run: |
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep '\.py$' | grep -E '^ongoing/backend/(fastapi_app|core)/' || true)
          if [ -n "$CHANGED_FILES" ]; then
            echo "Type checking changed files: $CHANGED_FILES"
            mypy $CHANGED_FILES --ignore-missing-imports --no-strict-optional
          else
            echo "No relevant Python files changed"
          fi

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ongoing/backend

    services:
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
        env:
          discovery.type: single-node
          xpack.security.enabled: false
        options: >-
          --health-cmd "curl -f http://localhost:9200/_cluster/health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 9200:9200

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: Run pytest
        run: |
          export PYTHONPATH=$PYTHONPATH:$(pwd)/fastapi_app
          pytest --cov=. --cov-report=xml --cov-report=term-missing || echo "::warning::Some tests failed or no tests found"
        env:
          ELASTICSEARCH_URL: http://localhost:9200

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./ongoing/backend/coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

  api-integration-tests:
    name: API Integration Tests
    runs-on: ubuntu-latest
    continue-on-error: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Start services with Docker Compose
        run: |
          cd ongoing
          docker compose -f docker-compose.yml up -d
          sleep 15

      - name: Wait for services to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:7776/docs; do sleep 2; done'
          timeout 60 bash -c 'until curl -f http://localhost:9200; do sleep 2; done' || echo "::warning::Elasticsearch not available"

      - name: Run API health checks
        run: |
          curl -f http://localhost:7776/docs || echo "::warning::Backend API not responding"
          curl -f http://localhost:9200/_cluster/health || echo "::warning::Elasticsearch not responding"

      - name: Test Collect Log API
        continue-on-error: true
        run: |
          curl -f http://localhost:7776/api/col/ziplist || echo "::warning::Collect Log API test failed"
          curl -f http://localhost:7776/api/col/cache/stats || echo "::warning::Cache stats API test failed"

      - name: Test UUID API
        continue-on-error: true
        run: |
          curl -f http://localhost:7776/api/uuid/cache/stats || echo "::warning::UUID API test failed"

      - name: Check Docker logs
        if: failure()
        run: |
          cd ongoing
          docker compose -f docker-compose.yml logs backend

      - name: Stop services
        if: always()
        run: |
          cd ongoing
          docker compose -f docker-compose.yml down

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ongoing/backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Run Safety check
        run: safety check --json || true

      - name: Run Bandit security scan
        run: bandit -r fastapi_app/ core/ -f json -o bandit-report.json || true

      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: ongoing/backend/bandit-report.json
          retention-days: 30
