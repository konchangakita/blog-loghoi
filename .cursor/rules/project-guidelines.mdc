---
description: blog-loghoiプロジェクトの基本ガイドラインとコーディング規約
globs: ["**/*"]
alwaysApply: true
---

# blog-loghoi プロジェクト用 Cursor ルール

## プロジェクト概要
このプロジェクトは「Nutanixログホイホイ」ブログシリーズのコード置き場です。
- ログ収集・分析システムの開発・検証用リポジトリ
- ブログ記事と連動した開発履歴を管理
- Docker、Kubernetes、FastAPI、Flask、Next.js等の技術スタック

## コーディング規約

### 全般的なルール
- コードは読みやすく、保守しやすいように書く
- 適切なコメントを記述する（日本語コメント可）
- 変数名や関数名は意味が分かりやすいものにする
- 一貫したインデント（スペース4つ）を使用する
- 型ヒントを積極的に使用する（Python）

### コミットメッセージ
- 日本語で記述する
- 変更内容を明確に表現する
- 例: `feat: ログ収集機能の追加`
- 例: `fix: Elasticsearch接続エラーの修正`
- 例: `docs: READMEの更新`

### ブランチ戦略
- `main`: 本番環境用
- `refactor`: リファクタリング用メインブランチ
- `feature/*`: 機能開発用ブランチ
- `blog/*`: ブログ記事対応用ブランチ

## 注意事項

### ブログ連携
- ブログ記事とコードの対応関係を明確にする
- 変更履歴を適切に管理する
- バージョン管理を適切に行う

### 実験的機能
- 実験的機能は適切にラベル付けする
- 本番環境への影響を考慮する
- ロールバック戦略を準備する

## 開発作業の制限

### フォルダ制限
- **すべての更新は`ongoing/`フォルダ配下で行うこと**
- `blog/`フォルダは過去のブログ記事対応履歴のため、直接編集禁止
- 新しい機能開発や修正は必ず`ongoing/`配下で実施
- 完了した機能は適切なタイミングで`blog/`に日付フォルダとして移動

### 開発フロー
1. `ongoing/`フォルダで開発
2. テスト・レビュー完了
3. ブログ記事公開と同時に`blog/YYYYMMDD/`に移動

このルールに従って、高品質で保守しやすいコードを書くことを心がけてください。