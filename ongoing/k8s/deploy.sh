#!/bin/bash
set -e

# „Ç´„É©„ÉºÂá∫Âäõ
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Ë®≠ÂÆö
KUBECONFIG_PATH="${KUBECONFIG:-/home/nutanix/nkp/kon-hoihoi.conf}"
NAMESPACE="loghoihoi"

echo -e "${GREEN}======================================${NC}"
echo -e "${GREEN}   Log Hoihoi Kubernetes Deployment  ${NC}"
echo -e "${GREEN}======================================${NC}"
echo ""
echo -e "Kubeconfig: ${YELLOW}${KUBECONFIG_PATH}${NC}"
echo -e "Namespace: ${YELLOW}${NAMESPACE}${NC}"
echo ""

# kubeconfig„ÅÆÁ¢∫Ë™ç
if [ ! -f "${KUBECONFIG_PATH}" ]; then
    echo -e "${RED}Error: Kubeconfig not found at ${KUBECONFIG_PATH}${NC}"
    exit 1
fi

# kubectl„ÅÆ„Ç®„Ç§„É™„Ç¢„Çπ
K="kubectl --kubeconfig=${KUBECONFIG_PATH}"

# „ÇØ„É©„Çπ„ÇøÊé•Á∂öÁ¢∫Ë™ç
echo -e "${BLUE}Checking cluster connection...${NC}"
${K} cluster-info || {
    echo -e "${RED}Failed to connect to cluster${NC}"
    exit 1
}
echo -e "${GREEN}‚úì Cluster connection OK${NC}"
echo ""

# NamespaceÁ¢∫Ë™ç
echo -e "${BLUE}Checking namespace...${NC}"
if ${K} get namespace ${NAMESPACE} &>/dev/null; then
    echo -e "${GREEN}‚úì Namespace '${NAMESPACE}' exists${NC}"
else
    echo -e "${YELLOW}Creating namespace '${NAMESPACE}'...${NC}"
    ${K} create namespace ${NAMESPACE}
    echo -e "${GREEN}‚úì Namespace created${NC}"
fi
echo ""

# SSHÈçµÁÆ°ÁêÜ
echo -e "${GREEN}======================================${NC}"
echo -e "${GREEN}   SSH Key Management${NC}"
echo -e "${GREEN}======================================${NC}"
echo ""

SSH_KEY_DIR="$(cd "$(dirname "$0")/.." && pwd)/config/.ssh"
SSH_PRIVATE_KEY="${SSH_KEY_DIR}/loghoi-key"
SSH_PUBLIC_KEY="${SSH_KEY_DIR}/loghoi-key.pub"

# SSHÈçµ„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆ‰ΩúÊàê
if [ ! -d "${SSH_KEY_DIR}" ]; then
    echo -e "${YELLOW}Creating SSH key directory...${NC}"
    mkdir -p "${SSH_KEY_DIR}"
    chmod 700 "${SSH_KEY_DIR}"
    echo -e "${GREEN}‚úì Directory created: ${SSH_KEY_DIR}${NC}"
else
    chmod 700 "${SSH_KEY_DIR}"
fi

# SSHÈçµ„ÅÆÁîüÊàê„Åæ„Åü„ÅØÁ¢∫Ë™ç
if [ -f "${SSH_PRIVATE_KEY}" ] && [ -f "${SSH_PUBLIC_KEY}" ]; then
    echo -e "${GREEN}‚úì Existing SSH key pair found${NC}"
    echo -e "  Private key: ${BLUE}${SSH_PRIVATE_KEY}${NC}"
    echo -e "  Public key: ${BLUE}${SSH_PUBLIC_KEY}${NC}"
    KEYS_GENERATED=false
else
    echo -e "${YELLOW}Generating new SSH key pair...${NC}"
    ssh-keygen -t rsa -b 4096 \
        -f "${SSH_PRIVATE_KEY}" \
        -N "" \
        -C "loghoi@kubernetes" \
        >/dev/null 2>&1
    
    chmod 600 "${SSH_PRIVATE_KEY}"
    chmod 644 "${SSH_PUBLIC_KEY}"
    echo -e "${GREEN}‚úì SSH key pair generated successfully${NC}"
    KEYS_GENERATED=true
fi

# ÂÖ¨ÈñãÈçµ„ÅÆË°®Á§∫
echo ""
echo -e "${BLUE}=========================================${NC}"
echo -e "${BLUE}üìã SSHÂÖ¨ÈñãÈçµ${NC}"
echo -e "${BLUE}=========================================${NC}"
cat "${SSH_PUBLIC_KEY}"
echo -e "${BLUE}=========================================${NC}"
echo ""

if [ "$KEYS_GENERATED" = true ]; then
    echo ""
    echo -e "${RED}üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®${NC}"
    echo -e "${RED}üö®                                        üö®${NC}"
    echo -e "${RED}üö®  Êñ∞„Åó„ÅÑSSHÂÖ¨ÈñãÈçµ„ÅåÁîüÊàê„Åï„Çå„Åæ„Åó„ÅüÔºÅ    üö®${NC}"
    echo -e "${RED}üö®                                        üö®${NC}"
    echo -e "${RED}üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®üö®${NC}"
    echo ""
    echo -e "${RED}‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è  ÂøÖÈ†à‰ΩúÊ•≠: Nutanix Prism„Å∏„ÅÆÂÖ¨ÈñãÈçµÁôªÈå≤  ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è${NC}"
    echo ""
    echo -e "${YELLOW}1Ô∏è‚É£ Prism Element > Settings > Cluster Lockdown${NC}"
    echo -e "${YELLOW}2Ô∏è‚É£ „ÄåAdd Public Key„Äç„Çí„ÇØ„É™„ÉÉ„ÇØ${NC}"
    echo -e "${YELLOW}3Ô∏è‚É£ ‰∏äË®ò„ÅÆÂÖ¨ÈñãÈçµ„ÇíË≤º„Çä‰ªò„Åë„Å¶‰øùÂ≠ò${NC}"
    echo ""
    echo -e "${GREEN}üí° „Éí„É≥„Éà:${NC}"
    echo -e "   - „Ç¢„Éó„É™UIËµ∑ÂãïÂæå„ÄÅÂè≥‰∏ä„ÅÆ„Äå${BLUE}Open SSH KEY${NC}„Äç„Éú„Çø„É≥„Åã„Çâ„ÇÇÁ¢∫Ë™çÂèØËÉΩ"
    echo -e "   - „ÇØ„É™„ÉÉ„ÇØ„Åß„ÇØ„É™„ÉÉ„Éó„Éú„Éº„Éâ„Å´„Ç≥„Éî„Éº„Åï„Çå„Åæ„Åô"
    echo ""
    read -p "ÂÖ¨ÈñãÈçµ„ÅÆÁôªÈå≤„ÅØÂÆå‰∫Ü„Åó„Åæ„Åó„Åü„ÅãÔºü (y/N): " -n 1 -r
    echo ""
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${YELLOW}„Éá„Éó„É≠„Ç§„Çí‰∏≠Êñ≠„Åó„Åæ„Åô„ÄÇÂÖ¨ÈñãÈçµ„ÇíÁôªÈå≤„Åó„Å¶„Åã„ÇâÂÜçÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ${NC}"
        exit 1
    fi
else
    echo -e "${BLUE}‚ÑπÔ∏è  Êó¢Â≠ò„ÅÆSSHÈçµ„Çí‰ΩøÁî®„Åó„Åæ„Åô${NC}"
    echo -e "   ÂÖ¨ÈñãÈçµ„ÇíNutanix Prism„Å´ÁôªÈå≤„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
fi

# SSHÈçµ„Éï„Ç°„Ç§„É´„ÅÆË™≠„ÅøÂèñ„ÇäÊ®©Èôê„ÉÅ„Çß„ÉÉ„ÇØ
echo ""
echo -e "${BLUE}Checking SSH key permissions...${NC}"
CURRENT_USER=$(whoami)

# ÁßòÂØÜÈçµ„ÅÆË™≠„ÅøÂèñ„Çä„ÉÜ„Çπ„Éà
if ! cat "${SSH_PRIVATE_KEY}" >/dev/null 2>&1; then
    echo -e "${RED}‚ö†Ô∏è  Ë≠¶Âëä: SSHÁßòÂØÜÈçµ„ÇíË™≠„ÅøÂèñ„Çå„Åæ„Åõ„Çì${NC}"
    echo -e "${YELLOW}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "${YELLOW}ÂïèÈ°å: ÁèæÂú®„ÅÆ„É¶„Éº„Ç∂„Éº (${CURRENT_USER}) „ÅåÁßòÂØÜÈçµ„ÇíË™≠„ÅøÂèñ„Çå„Åæ„Åõ„Çì${NC}"
    echo -e ""
    echo -e "${YELLOW}„Éï„Ç°„Ç§„É´ÊÉÖÂ†±:${NC}"
    ls -l "${SSH_PRIVATE_KEY}"
    echo -e ""
    echo -e "${YELLOW}ÂØæÂá¶ÊñπÊ≥ïÔºà‰ª•‰∏ã„ÅÆ„ÅÑ„Åö„Çå„Åã„ÇíÂÆüË°åÔºâ:${NC}"
    echo -e ""
    echo -e "${GREEN}ÊñπÊ≥ï1: „Éï„Ç°„Ç§„É´ÊâÄÊúâËÄÖ„ÇíÁèæÂú®„ÅÆ„É¶„Éº„Ç∂„Éº„Å´Â§âÊõ¥${NC}"
    echo -e "  sudo chown ${CURRENT_USER}:${CURRENT_USER} ${SSH_PRIVATE_KEY} ${SSH_PUBLIC_KEY}"
    echo -e ""
    echo -e "${GREEN}ÊñπÊ≥ï2: ‰∏ÄÊôÇÁöÑ„Å´sudo„ÅßÂÆüË°å${NC}"
    echo -e "  sudo KUBECONFIG=${KUBECONFIG_PATH} ./deploy.sh"
    echo -e ""
    echo -e "${YELLOW}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    exit 1
fi

# ÂÖ¨ÈñãÈçµ„ÅÆË™≠„ÅøÂèñ„Çä„ÉÜ„Çπ„Éà
if ! cat "${SSH_PUBLIC_KEY}" >/dev/null 2>&1; then
    echo -e "${RED}‚ö†Ô∏è  Ë≠¶Âëä: SSHÂÖ¨ÈñãÈçµ„ÇíË™≠„ÅøÂèñ„Çå„Åæ„Åõ„Çì${NC}"
    echo -e "${YELLOW}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "${YELLOW}ÂïèÈ°å: ÁèæÂú®„ÅÆ„É¶„Éº„Ç∂„Éº (${CURRENT_USER}) „ÅåÂÖ¨ÈñãÈçµ„ÇíË™≠„ÅøÂèñ„Çå„Åæ„Åõ„Çì${NC}"
    echo -e ""
    echo -e "${YELLOW}„Éï„Ç°„Ç§„É´ÊÉÖÂ†±:${NC}"
    ls -l "${SSH_PUBLIC_KEY}"
    echo -e ""
    echo -e "${YELLOW}ÂØæÂá¶ÊñπÊ≥ï:${NC}"
    echo -e "  sudo chown ${CURRENT_USER}:${CURRENT_USER} ${SSH_PRIVATE_KEY} ${SSH_PUBLIC_KEY}"
    echo -e "${YELLOW}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    exit 1
fi

echo -e "${GREEN}‚úì SSH keys are readable${NC}"
echo ""

# Kubernetes Secret „ÅÆ‰ΩúÊàê„Åæ„Åü„ÅØÁ¢∫Ë™ç
echo -e "${YELLOW}[2/7] Creating or checking Secret...${NC}"
if ${K} get secret loghoi-secrets -n ${NAMESPACE} &>/dev/null; then
    echo -e "${GREEN}‚úì Secret 'loghoi-secrets' already exists${NC}"
else
    echo -e "${YELLOW}Creating Secret from SSH keys...${NC}"
    ${K} create secret generic loghoi-secrets \
        --namespace=${NAMESPACE} \
        --from-file=SSH_PRIVATE_KEY="${SSH_PRIVATE_KEY}" \
        --from-file=SSH_PUBLIC_KEY="${SSH_PUBLIC_KEY}"
    echo -e "${GREEN}‚úì Secret 'loghoi-secrets' created${NC}"
fi
echo ""

# „Éá„Éó„É≠„Ç§È†ÜÂ∫è
echo ""
echo -e "${GREEN}======================================${NC}"
echo -e "${GREEN}   Deploying Resources${NC}"
echo -e "${GREEN}======================================${NC}"
echo ""

# 1. ConfigMap
echo -e "${YELLOW}[1/9] Deploying ConfigMap...${NC}"
${K} apply -f configmap.yaml
echo -e "${GREEN}‚úì ConfigMap deployed${NC}"
echo ""

# 2. Nginx ConfigMap
echo -e "${YELLOW}[2/9] Deploying Nginx ConfigMap...${NC}"
${K} apply -f nginx-config.yaml
echo -e "${GREEN}‚úì Nginx ConfigMap deployed${NC}"
echo ""

# 3. Elasticsearch PVC
echo -e "${YELLOW}[3/9] Deploying Elasticsearch PVC...${NC}"
${K} apply -f elasticsearch-pvc.yaml
echo -e "${GREEN}‚úì Elasticsearch PVC deployed${NC}"
echo ""

# 4. Backend Output PVC
echo -e "${YELLOW}[4/9] Deploying Backend Output PVC...${NC}"
${K} apply -f backend-output-pvc.yaml
echo -e "${GREEN}‚úì Backend Output PVC deployed${NC}"
echo ""

# 5. Elasticsearch
echo -e "${YELLOW}[5/9] Deploying Elasticsearch...${NC}"
${K} apply -f elasticsearch-deployment.yaml
echo -e "${GREEN}‚úì Elasticsearch deployed${NC}"
echo ""

# 6. Services
echo -e "${YELLOW}[6/9] Deploying Services...${NC}"
${K} apply -f services.yaml
echo -e "${GREEN}‚úì Services deployed${NC}"
echo ""

# 7. Backend & Frontend
echo -e "${YELLOW}[7/9] Deploying Backend and Frontend...${NC}"
${K} apply -f backend-deployment.yaml
${K} apply -f frontend-deployment.yaml
echo -e "${GREEN}‚úì Backend and Frontend deployed${NC}"
echo ""

# 8. Ingress
echo -e "${YELLOW}[8/9] Deploying Ingress...${NC}"
${K} apply -f ingress.yaml
echo -e "${GREEN}‚úì Ingress deployed${NC}"
echo ""

# 9. Syslog (Optional)
echo -e "${YELLOW}[9/9] Deploying Syslog (Optional)...${NC}"
if [ -f "syslog-deployment.yaml" ]; then
    ${K} apply -f syslog-deployment.yaml
    echo -e "${GREEN}‚úì Syslog deployed${NC}"
else
    echo -e "${YELLOW}‚ö† Syslog deployment skipped (file not found)${NC}"
fi
echo ""

# „Éá„Éó„É≠„Ç§Áä∂ÊÖãÁ¢∫Ë™ç
echo -e "${BLUE}Deployment Status:${NC}"
echo ""
${K} get pods -n ${NAMESPACE} -l app=loghoi
echo ""
${K} get svc -n ${NAMESPACE}
echo ""
${K} get ingress -n ${NAMESPACE}
echo ""

echo -e "${GREEN}======================================${NC}"
echo -e "${GREEN}   Deployment Completed!             ${NC}"
echo -e "${GREEN}======================================${NC}"
echo ""
echo -e "${YELLOW}Next steps:${NC}"
echo -e "1. Wait for all pods to be ready:"
echo -e "   ${BLUE}kubectl --kubeconfig=${KUBECONFIG_PATH} get pods -n ${NAMESPACE} -w${NC}"
echo ""
echo -e "2. Check Ingress IP:"
echo -e "   ${BLUE}kubectl --kubeconfig=${KUBECONFIG_PATH} get ingress -n ${NAMESPACE}${NC}"
echo ""
echo -e "3. Access the application:"
echo -e "   ${BLUE}http://<INGRESS_IP>${NC}"
echo ""



